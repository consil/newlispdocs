Function: uuid
----------------------------------

#### syntax: (uuid [*str-node*])

Constructs and returns a UUID (Universally Unique IDentifier). Without a
node spec in *str-node*, a type 4 UUID random generated byte number is
returned. When the optional *str-node* parameter is used, a type 1 UUID
is returned. The string in *str-node* specifies a valid MAC (Media
Access Code) from a network adapter installed on the node or a random
node ID. When a random node ID is specified, the least significant bit
of the first node byte should be set to 1 to avoid clashes with real MAC
identifiers. UUIDs of type 1 with node ID are generated from a timestamp
and other data. See [RFC 4122](http://www.ietf.org/rfc/rfc4122.txt) for
details on UUID generation.

    ;; type 4 UUID for any system

    (uuid)  → "493AAD61-266F-48A9-B99A-33941BEE3607"

    ;; type 1 UUID preferred for distributed systems

    ;; configure node ID for ether 00:14:51:0a:e0:bc
    (set 'id (pack "cccccc" 0x00 0x14 0x51 0x0a 0xe0 0xbc))

    (uuid  id)  → "0749161C-2EC2-11DB-BBB2-0014510AE0BC"

Each invocation of the `uuid` function will yield a new unique UUID. The
UUIDs are generated without system-wide shared stable store (see RFC
4122). If the system generating the UUIDs is distributed over several
nodes, then type 1 generation should be used with a different node ID on
each node. For several processes on the same node, valid UUIDs are
guaranteed even if requested at the same time. This is because the
process ID of the generating newLISP process is part of the seed for the
random number generator. When type 4 IDs are used on a distributed
system, two identical UUID's are still highly unlikely and impossible
for type 1 IDs if real MAC addresses are used.



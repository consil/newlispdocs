Function: find
----------------------------------

#### syntax: (find *exp-key* *list* [*func-compare* | *int-regex-option*])\
 syntax: (find *str-key* *str-data* [*int-regex-option* [*int-offset*]])

### Find an expression in a list

If the second argument evaluates to a *list*, then `find` returns the
index position (offset) of the element derived from evaluating
*exp-key*.

Optionally, an operator or user-defined function can be specified in
*func-compare*. If the *exp-key* is a string, a regular expression
option can be specified with the *int-regex-option* parameter.

When using regular expressions or comparison functors the system
variable `$0` is set to the last element found.

    ; find an expression in a list
    (find '(1 2) '((1 4) 5 6 (1 2) (8 9)))  → 3

    (find "world" '("hello" "world"))       → 1
    (find "hi" '("hello" "world"))          → nil

    (find "newlisp" '("Perl" "Python" "newLISP") 1)  → 2

    ; use the comparison functor
    (find 3 '(8 4 3  7 2 6) >)  → 4
    $0 → 2

    (find "newlisp" '("Perl" "Python" "newLISP") 
                     (fn (x y) (regex x y 1))) → 2
    $0 → "newLISP"

    (find 5 '((l 3) (k 5) (a 10) (z 22)) 
             (fn (x y) (= x (last y))))  → 1
    $0 → (k 5)

    (find '(a ?) '((l 3) (k 5) (a 10) (z 22)) match)  → 2
    $0 → (a 10)

    (find '(X X) '((a b) (c d) (e e) (f g)) unify)  → 2
    $0 → (e e)

    ; define the comparison functor first for better readability
    (define (has-it-as-last x y) (= x (last y)))

    (find 22 '((l 3) (k 5) (a 10) (z 22)) has-it-as-last)  → 3
    $0 → (z 22)

Using [match](#match) and [unify](#unify), list searches can be
formulated which are as powerful as regular expression searches are for
strings.

### Find a string in a string

If the second argument, *str-data*, evaluates to a string, then the
offset position of the string *str-key* (found in the first argument,
*str-data*) is returned. In this case, `find` also works on binary
*str-data*. The offset position returned is always based on counting
single byte characters even when running the UTF-8 enabled version of
newLISP.

The presence of a third parameter specifies a search using the regular
expression pattern specified in *str-pattern*, as well as an option
number specified in *int-regex-option* (i.e., 1 (one) for
case-insensitive search or `0` (zero) for no special options). If
*int-regex-option* is specified an optional *int-offset* argument can be
specified too to start the search not at the beginning but at the offset
given. In any case the position returned by `find` is calculated
relative to the beginning of the string.

To specify *int-offset* in a simple string search without regular
expressions, specify `nil` for *int-regex-option*.

In newLISP, regular expressions are standard Perl Compatible Regular
Expression (PCRE) searches. Found expressions or subexpressions are
returned in the system variables `$0`, `$1`, `$2`, etc., which can be
used like any other symbol. As an alternative, the contents of these
variables can also be accessed by using `($ 0)`, `($ 1)`, `($ 2)`, etc.
This method allows indexed access (i.e., `($ i)`, where `i` is an
integer).

See [regex](#regex) for the meaning of the option numbers and more
information on regular expression searching.

    ; simple string search
    (find "world" "Hello world")  → 6
    (find "WORLD" "Hello woRLd")  → nil

    ; case-insensitive regex

    (find "WorlD" "Hello woRLd" 1)  → 6   
                                    
    (find "hi" "hello world")       → nil
    (find "Hello" "Hello world")    → 0

    ; regex with default options

    (find "cat|dog" "I have a cat" 0)  → 9 
    $0                                 → "cat"
    (find "cat|dog" "my dog" 0)        → 3
    $0                                 → "dog"
    (find "cat|dog" "MY DOG" 1)        → 3
    $0                                 → "DOG"

    ; use an optional offset
    (find "cat|dog" "I have a cat and a dog" 0)    → 9
    (find "cat|dog" "I have a cat and a dog" 0 12) → 19

    ;; find with subexpressions in regular expression
    ;; and access with system variables

    (set 'str  "http://nuevatec.com:80")

    (find "http://(.*):(.*)" str 0)  → 0
                                     
    $0  → "http://nuevatec.com:80"
    $1  → "nuevatec.com"
    $2  → "80"

    ;; system variables as an indexed expression (since 8.0.5)
    ($ 0)  → "http://nuevatec.com:80"
    ($ 1)  → "nuevatec.com"
    ($ 2)  → "80"

For other functions using regular expressions, see
[directory](#directory), [find-all](#find-all), [parse](#parse),
[regex](#regex), [replace](#replace), and [search](#search).

To find expressions in nested or multidimensional lists, use the
[ref](#ref) and [ref-all](#ref-all) functions.



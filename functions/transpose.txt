Function: transpose
---------------------------------------

#### syntax: (transpose *matrix*)

Transposes a *matrix* by reversing the rows and columns. Any kind of
list-matrix can be transposed. Matrices are made rectangular by filling
in `nil` for missing elements, omitting elements where appropriate, or
expanding atoms in rows into lists. Matrix dimensions are calculated
using the number of rows in the original matrix for columns and the
number of elements in the first row as number of rows for the transposed
matrix.

The matrix to transpose can contain any data-type.

The dimensions of a matrix are defined by the number of rows and the
number of elements in the first row. A matrix can either be a nested
list or an [array](#array).

    (set 'A '((1 2 3) (4 5 6)))
    (transpose A)                      → ((1 4) (2 5) (3 6))
    (transpose (list (sequence 1 5)))  → ((1) (2) (3) (4) (5))

    ; any data type is allowed in the matrix
    (transpose '((a b) (c d) (e f)))   → ((a c e) (b d f))

    ; arrays can be transposed too
    (set 'A (array 2 3 (sequence 1 6)))
    (set 'M (transpose A)) 
    M → ((1 4) (2 5) (3 6))

The number of columns in a matrix is defined by the number of elements
in the first row of the matrix. If other rows have fewer elements,
`transpose` will assume `nil` for those missing elements. Superfluous
elements in a row will be ignored.

    (set 'A '((1 2 3) (4 5) (7 8 9)))

    (transpose A)  → ((1 4 7) (2 5 8) (3 nil 9))

If a row is any other data type besides a list, the transposition treats
it like an entire row of elements of that data type:

    (set 'A '((1 2 3) X (7 8 9)))

    (transpose A)  → ((1 X 7) (2 X 8) (3 X 9))

All operations shown here on lists can also be performed on arrays.

See also the matrix operations [det](#det), [invert](#invert),
[mat](#mat) and [multiply](#multiply).



Function: assoc
-----------------------------------

#### syntax: (assoc *exp-key* *list-alist*)\
 syntax: (assoc *list-exp-key* *list-alist*)

In the first syntax the value of *exp-key* is used to search
*list-alist* for a *member-list* whose first element matches the key
value. If found, the *member-list* is returned; otherwise, the result
will be `nil`.

    (assoc 1 '((3 4) (1 2)))  → (1 2)

    (set 'data '((apples 123) (bananas 123 45) (pears 7)))

    (assoc 'bananas data)  → (bananas 123 45)
    (assoc 'oranges data)  → nil

Together with [setf](#setf) `assoc` can be used to change an
association.

    (setf (assoc 'pears data) '(pears 8))

    data  → ((apples 123) (bananas 123 45) (pears 8))

In the second syntax more then one key expressions can be specified to
search in nested, multilevel association lists:

    (set 'persons '(
        (id001 (name "Anne") (address (country "USA") (city "New York")))
        (id002 (name "Jean") (address (country "France") (city "Paris")))
    ))

    (assoc '(id001 address) persons) → (address (country "USA") (city "New York"))
    (assoc '(id001 address city) persons) → (city "New York")

The list in *list-aList* can be a context which will be interpreted as
its *default functor*. This way very big lists can be passed by
reference for speedier access and less memory usage:

    (set 'persons:persons '(
        (id001 (name "Anne") (address (country "USA") (city "New York")))
        (id002 (name "Jean") (address (country "France") (city "Paris")))
    ))

    (define (get-city db id)
        (last (assoc (list id 'address 'city) db ))
    )

    (get-city persons 'id001) → "New York"

For making replacements in association lists, use the [setf](#setf)
together with the `assoc` function. The [lookup](#lookup) function is
used to perform association lookup and element extraction in one step.



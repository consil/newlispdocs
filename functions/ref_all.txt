Function: ref-all
-------------------------------------

#### syntax: (ref-all *exp-key* *list* [*func-compare* [true]])

Works similarly to [ref](#ref), but returns a list of all index vectors
found for *exp-key* in *list*.

When the optional `true` parameter is present, the elements found is
returned of the index vectors.

By default, `ref-all` checks if expressions are equal. With
*func-compare*, more complex comparison functions can be used.

The system variable `$count` counts the number of elements found.

    (set 'L '(a b c (d a f (a h a)) (k a (m n a) (x))))

    (ref-all 'a L) → ((0) (3 1) (3 3 0) (3 3 2) (4 1) (4 2 2))
    $count → 6

    ; the index vector returned by ref-all can be used to index the list

    (L '(3 1)) → a

    ; mapped implicit indexing of L 

    (map 'L (ref-all 'a L)) → (a a a a a a)

    ; with comparison operator

    (set 'L '(a b c (d f (h l a)) (k a (m n) (x))))

    ; not specifying a comparison functor assumes =

    (ref-all 'c L)       → ((2))
    (ref-all 'c L =)     → ((2))

    ; look for all elements where c is greater

    (ref-all 'c L >)       → ((0) (1) (3 2 2) (4 1))
    (ref-all 'c L > true)  → (a b a a)


    ; use an anonymous function to compare

    (ref-all 'a L (fn (x y) (or (= x y) (= y 'k))))  
    → ((0) (3 2 2) (4 0) (4 1))

    ; the key is nil because the comparison function only looks at the second argument

    (ref-all nil L (fn (x y) (> (length y) 2)))      
    → ((3) (3 2) (4))

    ; define the comparison functions first

    (define (is-long? x y) (> (length y) 2)) ; the x gets occupied by 'nil

    (ref-all nil L is-long?)    →  ((3) (3 2) (4))

    (define (is-it-or-d x y) (or (= x y) (= y 'd)))

    (set 'L '(a b (c d (e) f)) )

    (ref-all 'e L is-it-or-d)  → ((2 1) (2 2 0))

The comparison function can be a previously defined function. Note that
the comparison function always takes two arguments, even if only the
second argument is used inside the function (as in the example using
`is-long?`).

Using the [match](#match) and [unify](#unify) functions, list searches
can be formulated that are as powerful as regular expression searches
are for strings.

    (set 'L '((l 3) (a 12) (k 5) (a 10) (z 22)) )

    ; look for all pairs staring with the symbol a

    (ref-all '(a ?) L match)      → ((1) (3))
    (ref-all '(a ?) L match true) → ((a 12) (a 10))

    ; look for all pairs where elements are equal

    (set 'L '( ((a b) (c d)) ((e e) (f g)) ((z) (z))))

    (ref-all '(X X) L unify)      → ((1 0) (2))
    (ref-all '(X X) L unify true) → ((e e) ((z) (z)))

    ; look for all pairs where the second element is the symbol g

    (set 'L '( ((x y z) g) ((a b) (c d)) ((e e) (f g)) ))

    (ref-all '(X g) L unify)      → ((0) (2 1))
    (ref-all '(X g) L unify true) → (((x y z) g) (f g))

See also the [ref](#ref) function.


